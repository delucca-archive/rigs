---
- name: Gathering service facts
  service_facts:

- name: Getting farmer service status
  set_fact:
    farmer_service: "{{ ansible_facts.services['chia-farmer.service'] | default({ 'state': 'absent' }) }}"

- name: Defining if the farmer is running
  set_fact:
    farmer_is_running: "{{ farmer_service.state == 'running' }}"

- name: Ensure dependencies
  become: yes
  package:
    name:
    - unzip
    - screen
  when: not farmer_is_running

- name: Ensure temporary directory exists
  file:
    path: /tmp/hpool-miner
    state: directory
  when: not farmer_is_running

- name: Fetch hpool miner binary
  unarchive:
    src: "https://github.com/hpool-dev/chia-miner/releases/download/{{ hpool_miner_version }}/HPool-Miner-chia-{{ hpool_miner_version }}-linux.zip"
    dest: /tmp/hpool-miner
    remote_src: yes
  when: not farmer_is_running

- name: Ensure bin directory exists
  file:
    path: "{{ bin_dir_path }}"
    state: directory
  when: not farmer_is_running

- name: Copy hpool miner binary to user bin
  copy:
    src: /tmp/hpool-miner/linux/hpool-miner-chia
    dest: "{{ bin_dir_path }}/hpool-miner"
    mode: a+x
  when: not farmer_is_running

- name: Ensure lib directory exists
  file:
    path: "{{ lib_dir_path }}/hpool"
    state: directory
  when: not farmer_is_running

- name: Create hpool config
  template:
    src: templates/hpool-miner-config.yaml.j2
    dest: "{{ lib_dir_path }}/hpool/miner-config.yaml"

- name: Create farmer service
  become: yes
  template:
    src: templates/chia-farmer.service.j2
    dest: /etc/systemd/system/chia-farmer.service
  when: not farmer_is_running

- name: Configure farmer service
  become: yes
  systemd:
    name: chia-farmer
    enabled: yes
    state: started
  when: not farmer_is_running

- name: Restart previous farmer service
  become: yes
  systemd:
    name: chia-farmer
    state: reloaded
  when: farmer_is_running
