---
- name: Removes unwanted packages
  become: yes
  package:
    state: absent
    name:
    - vim

- name: Install package dependencies
  become: yes
  package:
    state: present
    name:
    - alacritty
    - xclip
    - fzf
    - fd
    - tree
    - ripgrep
    - starship
    - zsh
    - ack
    - jq
    - bat
    - tmux
    - keychain
    - the_silver_searcher
    - yay
    - base-devel
    - diff-so-fancy
    - git
    - docker
    - docker-compose
    - kubectl
    - kubectx
    - go
    - terraform
    - aws-cli
    - minikube
    - gvim

- name: Check AUR dependencies
  ignore_errors: yes
  shell: "pacman -Qs {{ item }}"
  with_items: &aur_packages
  - navi
  - bottom
  - bat-extras-git
  - pgcli
  - mycli
  - vundle
  - tmuxinator
  - jetbrains-toolbox
  register: installed_aur_packages

- name: Install AUR dependencies
  command: "yay -S --noconfirm {{ item }}"
  with_items: *aur_packages
  when: installed_aur_packages.failed is defined and installed_aur_packages.failed == true

- name: Checking Zinit installation path
  stat:
    path: "{{ home_dir_path }}/.zinit/bin"
  register: zinit_installation

- name: Deciding if Zinit is installed
  set_fact:
    zinit_is_installed: "{{ zinit_installation.stat.exists }}"

- name: Install zinit
  git:
    repo: https://github.com/zdharma/zinit.git
    dest: "{{ home_dir_path }}/.zinit/bin"
  when: not zinit_is_installed

- name: Ensure Repositories folder structure
  file:
    path: "{{ home_dir_path }}/Repositories"
    state: directory

- name: Adding user {{ ansible_user }} to Docker group
  become: yes
  user:
    name: "{{ ansible_user }}"
    append: yes
    groups:
    - docker

- name: Launch and enable Docker service
  become: yes
  systemd:
    name: docker
    state: started
    enabled: yes

- name: Checking tpm installation path
  stat:
    path: "{{ home_dir_path }}/.tmux/plugins/tpm"
  register: tpm_installation

- name: Install tmux plugin manager
  git:
    repo: https://github.com/tmux-plugins/tpm.git
    dest: "{{ home_dir_path }}/.tmux/plugins/tpm"
  when: tpm_installation.stat.exists == false

- name: Ensure AWS config directory exists
  file:
    path: "{{ home_dir_path }}/.aws"
    state: directory

- name: Copy AWS CLI config
  copy:
    src: files/aws-config
    dest: "{{ home_dir_path }}/.aws/config"

- name: Install pipx
  shell: "python3 -m {{ item }}"
  with_items:
  - pip install --user pipx
  - pipx ensurepath

- name: Install pipx packages
  shell: "pipx install {{ item }}"
  ignore_errors: true # pipx returns a non-zero code if the package is already installed
  with_items:
  - poetry
  - jupyterthemes

- name: Install Jupyter theme
  shell: jt -t chesterish
