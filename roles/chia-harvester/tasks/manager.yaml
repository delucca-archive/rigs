---
- name: Gathering service facts
  service_facts:

- name: Checking manager installation
  stat:
    path: "{{ chia_plot_manager_install_path }}"
  register: chia_plot_manager_installation

- name: Checking manager venv creation
  stat:
    path: "{{ chia_plot_manager_install_path }}/venv"
  register: chia_plot_manager_venv

- name: Getting service status
  set_fact:
    plotter_service: "{{ ansible_facts.services['chia-plotter.service'] | default({ 'state': 'absent' }) }}"

- name: Defining facts regarding plotter installation
  set_fact:
    plotter_is_installed: "{{ chia_plot_manager_installation.stat.exists }}"
    plotter_venv_is_created: "{{ chia_plot_manager_venv.stat.exists }}"
    plotter_service_is_running: "{{ plotter_service.state == 'stopped' }}"

- name: Ensure local src directory
  file:
    path: "{{ install_src_path }}"
    state: directory
  when: not plotter_is_installed

- name: Fetch Swar plot manager source code
  git:
    repo: https://github.com/swar/Swar-Chia-Plot-Manager.git
    dest: "{{ chia_plot_manager_install_path }}"
  when: not plotter_is_installed

- name: Setting dependency names for Ubuntu distributions
  set_fact:
    pip_package_name: python3-pip
  when: ansible_distribution == 'Ubuntu' and not plotter_venv_is_created

- name: Setting dependency names for Arch distributions
  set_fact:
    pip_package_name: python-pip
  when: ansible_distribution == 'Archlinux' and not plotter_venv_is_created

- name: Install dependencies
  become: yes
  package:
    name:
    - "{{ pip_package_name }}"
    - jq
    state: present
  when: not plotter_venv_is_created

- name: Install pip dependencies for user
  pip:
    name:
    - virtualenv
    - yq
  when: not plotter_venv_is_created

- name: Install pip dependencies for sudo
  become: yes
  pip:
    name:
    - virtualenv
    - yq
  when: not plotter_venv_is_created

- name: Install requirements
  pip:
    chdir: "{{ chia_plot_manager_install_path }}"
    requirements: requirements.txt
    virtualenv: venv
    virtualenv_command: /usr/bin/python3 -m venv
  when: not plotter_venv_is_created

- name: Update plotter config
  template:
    src: "templates/plotter-config-{{ machine_id }}.yaml.j2"
    dest: "{{ chia_plot_manager_install_path }}/config.yaml"
  register: plotter_config

- name: Adds collect plotter garbage binary
  template:
    src: templates/collect-plotter-garbage.x.j2
    dest: "{{ bin_dir_path }}/collect-plotter-garbage"
    mode: a+x
  when: not plotter_is_installed

- name: Adds plotter status binary
  become: yes
  template:
    src: templates/plotter-status.x.j2
    dest: /usr/bin/plotter-status
    mode: a+x
  when: not plotter_is_installed

- name: Create plotter service
  become: yes
  template:
    src: templates/chia-plotter.service.j2
    dest: /etc/systemd/system/chia-plotter.service
  when: not plotter_service_is_running

- name: Configure plotter service
  become: yes
  systemd:
    name: chia-plotter
    enabled: yes
    state: started
  when: not plotter_service_is_running
