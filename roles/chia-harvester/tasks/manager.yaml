---
- name: Gathering service facts
  service_facts:

- name: Checking manager installation
  stat:
    path: "{{ chia_harvest_manager_install_path }}"
  register: chia_harvest_manager_installation

- name: Checking manager venv creation
  stat:
    path: "{{ chia_harvest_manager_install_path }}/venv"
  register: chia_harvest_manager_venv

- name: Getting service status
  set_fact:
    harvest_manager_service: "{{ ansible_facts.services['chia-harvest-manager.service'] | default({ 'state': 'absent' }) }}"

- name: Defining facts regarding harvest manager installation
  set_fact:
    harvest_manager_is_installed: "{{ chia_harvest_manager_installation.stat.exists }}"
    harvest_manager_venv_is_created: "{{ chia_harvest_manager_venv.stat.exists }}"
    harvest_manager_service_is_running: "{{ harvest_manager_service.state == 'stopped' }}"

- name: Ensure local src directory
  file:
    path: "{{ src_dir_path }}"
    state: directory
  when: not harvest_manager_is_installed

- name: Fetch Swar harvest manager source code
  git:
    repo: https://github.com/delucca-workspaces/Swar-Chia-Plot-Manager.git
    dest: "{{ chia_harvest_manager_install_path }}"
    version: feature/madmax
  when: not harvest_manager_is_installed

- name: Setting dependency names for Ubuntu distributions
  set_fact:
    pip_package_name: python3-pip
  when: ansible_distribution == 'Ubuntu' and not harvest_manager_venv_is_created

- name: Setting dependency names for Arch distributions
  set_fact:
    pip_package_name: python-pip
  when: ansible_distribution == 'Archlinux' and not harvest_manager_venv_is_created

- name: Install dependencies
  become: yes
  package:
    name:
    - "{{ pip_package_name }}"
    - jq
    state: present
  when: not harvest_manager_venv_is_created

- name: Install pip dependencies for user
  pip:
    name:
    - virtualenv
    - yq
  when: not harvest_manager_venv_is_created

- name: Install pip dependencies for sudo
  become: yes
  pip:
    name:
    - virtualenv
    - yq
  when: not harvest_manager_venv_is_created

- name: Install requirements
  pip:
    chdir: "{{ chia_harvest_manager_install_path }}"
    requirements: requirements.txt
    virtualenv: venv
    virtualenv_command: /usr/bin/python3 -m venv
  when: not harvest_manager_venv_is_created

- name: Install notification requirements
  pip:
    chdir: "{{ chia_harvest_manager_install_path }}"
    requirements: requirements-notification.txt
    virtualenv: venv
    virtualenv_command: /usr/bin/python3 -m venv
  when: not harvest_manager_venv_is_created

- name: Update harvest manager config
  template:
    src: "templates/configs/{{ node_id }}.yaml.j2"
    dest: "{{ chia_harvest_manager_install_path }}/config.yaml"
  register: harvest_manager_config

- name: Adds harvest manager binary
  become: yes
  template:
    src: templates/harvest-manager.x.j2
    dest: /usr/bin/harvest-manager
    mode: a+x
  when: not harvest_manager_is_installed

- name: Adds collect harvester garbage binary
  template:
    src: templates/collect-harvester-garbage.x.j2
    dest: "{{ bin_dir_path }}/collect-harvester-garbage"
    mode: a+x
  when: not harvest_manager_is_installed

- name: Create harvest manager service
  become: yes
  template:
    src: templates/chia-harvest-manager.service.j2
    dest: /etc/systemd/system/chia-harvest-manager.service
  when: not harvest_manager_service_is_running

- name: Configure harvest manager service
  become: yes
  systemd:
    name: chia-harvest-manager
    enabled: yes
    state: started
  when: not harvest_manager_service_is_running

- name: Restart harvest manager
  shell: harvest-manager restart
  when: harvest_manager_config.changed == true
